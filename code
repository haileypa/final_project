###### INSTRUCTIONS ###### 

# An outline for preparing your final project assignment is in this file.

# Below, throughout this file, you should put comments that explain exactly what you should do for each step of your project. You should specify variable names and processes to use. For example, "Use dictionary accumulation with the list you just created to create a dictionary called tag_counts, where the keys represent tags on flickr photos and the values represent frequency of times those tags occur in the list."

# You can use second person ("You should...") or first person ("I will...") or whatever is comfortable for you, as long as you are clear about what should be done.

# Some parts of the code should already be filled in when you turn this in:
# - At least 1 function which gets and caches data from 1 of your data sources, and an invocation of each of those functions to show that they work 
# - Tests at the end of your file that accord with those instructions (will test that you completed those instructions correctly!)
# - Code that creates a database file and tables as your project plan explains, such that your program can be run over and over again without error and without duplicate rows in your tables.
# - At least enough code to load data into 1 of your dtabase tables (this should accord with your instructions/tests)

######### END INSTRUCTIONS #########

# Put all import statements you need here.
import unittest
import itertools
import collections
import tweepy
import twitter_info 
import json
import sqlite3
import omdb
import requests

# Begin filling in instructions...


##### TWEEPY SETUP CODE:
# Authentication information should be in a twitter_info file...
consumer_key = twitter_info.consumer_key
consumer_secret = twitter_info.consumer_secret
access_token = twitter_info.access_token
access_token_secret = twitter_info.access_token_secret
auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

# Set up library to grab stuff from twitter with your authentication, and return it in a JSON format 
api = tweepy.API(auth, parser=tweepy.parsers.JSONParser())

##### END TWEEPY SETUP CODE
## cache setup code
CACHE_FNAME = "206final_project_cache.json"
try:
	cache_file = open(CACHE_FNAME,'r')
	cache_contents = cache_file.read()
	cache_file.close()
	CACHE_DICTION = json.loads(cache_contents)
except:
	CACHE_DICTION = {}
	

#Define function to cache data from a specific search term on twitter 
def get_tweets_from_search(search_phrase):
	tweets = []
	unique_identifier = "twitter_{}".format(search_phrase)
	if unique_identifier in CACHE_DICTION:
		twitter_results = CACHE_DICTION[unique_identifier]
	else:
		twitter_results = api.search(q=search_phrase)
		CACHE_DICTION[unique_identifier] = twitter_results
		f = open(CACHE_FNAME,'w')
		f.write(json.dumps(CACHE_DICTION, indent = 2))
		f.close()
	for tweet in twitter_results["statuses"]:
		tweets.append(tweet)

	return tweets

#Define a function to cache data about twitter users
def get_user(user_handle):
	unique_identifier = "twitter_{}".format(user_handle)
	if unique_identifier in CACHE_DICTION:
		user_results = CACHE_DICTION[unique_identifier]
	else:
		user_results = api.get_user(user_handle)
		CACHE_DICTION[unique_identifier] = user_results
		f = open(CACHE_FNAME,'w')
		f.write(json.dumps(CACHE_DICTION, indent = 2))
		f.close()
	
	return user_results

#define a function to cache data from omdb
def cache_omdb_info(movie_name):
	unique_identifier = "omdb_{}".format(movie_name)
	if unique_identifier in CACHE_DICTION:
		omdb_results = CACHE_DICTION[unique_identifier]
	else:
		r = requests.get("http://www.omdbapi.com/?t="+movie)
		omdb_results = r.text
		omdb_results = json.loads(omdb_results)
		#omdb_results = omdb.search_movie(movie_name)
		CACHE_DICTION[unique_identifier] = omdb_results
		f = open(CACHE_FNAME,'w')
		f.write(json.dumps(CACHE_DICTION, indent = 2))
		f.close()	
	return omdb_results
	
class Movie(object):
	#definea constructor that accepts a dictionary representing a movie
	def __init__(self, movie_dictionary):
		self.title = movie_dictionary["Title"]
		self.director = movie_dictionary["Director"]
		self.IMDBrating = movie_dictionary["imdbRating"]
		self.actors = movie_dictionary["Actors"]
		self.num_languages = len(movie_dictionary["Language"])
		self.year = movie_dictionary["Year"]

	#define a str method that returns a string of input about the movie
	def __str__(self):
		return "Title: {}, Director: {}, Year: {}, IMDB rating: {}, Actors: {}, Number of Languages: {}". format(self.title,self.director, self.year, self.IMDBrating, self.actors, self.num_languages)

class Tweets(object):
	def __init__(self, tweets):
		self.users_mentioned = []
		self.users_mentioned_names = []
		for tweet in tweets:
			self.tweet_id = tweet["id_str"]
			self.text = tweet["text"]
			self.user_id = tweet["user"]["id_str"]
			#self.movie_searched = tweet[1]["query"].replace("+", " ")
			self.favorites = tweet["favorite_count"]
			self.retweets = tweet["retweet_count"]
			self.users_mentioned += tweet["entities"]["user_mentions"]
			for a_user in self.users_mentioned:
				if a_user["screen_name"] not in self.users_mentioned_names:
					self.users_mentioned_names.append(a_user["screen_name"])

	def users_in_neighborhood(self,tweet):
		user_list_info = []
		for a_user in self.users_mentioned_names:
			user_list_info.append(get_user(a_user))
		return user_list_info


########### TESTS ###########
class cachingTests(unittest.TestCase):
	def testSearchTerm(self):
		fstr = open("206_final_project_cache.json","r").read()
		self.assertTrue("High School Musical" in fstr)
	def testUserCache(self):
		fstr = open("206_final_project_cache.json","r").read()
		self.assertTrue("ZacEfron" in fstr)
	def testget_movie_info(self):
		movie = get_movie_info("High SChool Musical")
		self.assertEqual(type(movie), type(["hey", 7, "bye"]))

class testMovies(unittest.TestCase):
	def testMovieList(self):
		self.assertEqual(type(movies_to_search), type(["one", "two", 3, 4]))
	def testMovieList2(self):
		self.assertEqual(len(movies_to_search), 3)
	def testMovieInfoList(self):
		self.assertEqual(type(movie_info_list_of_dicts), type([{},{},{}]))
	def testMovieInfoList2(self):
		self.assertEqual(len(movie_info_list_of_dicts), 3)
	def testOMDBdict(self):
		self.assertEqual(type(cache_omdb_info("High School Musical")),type({}))
	def test_tweets_1(self):
		conn = sqlite3.connect('final_project.db')
		cur = conn.cursor()
		cur.execute('SELECT * FROM Tweets');
		result = cur.fetchall()
		self.assertTrue(len(result)>=20, "Testing there are at least 20 records in the Tweets database")



## Remember to invoke all your tests...






# Put your tests here, with any edits you now need from when you turned them in with your project plan.


# Remember to invoke your tests so they will run! (Recommend using the verbosity=2 argument.)
